plugins {
    // common java conventions
    id 'theodolite.java-commons'
    // avro plugin
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.3.0"
}



repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    // These dependencies is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-configuration2:2.0'
    api "org.apache.avro:avro:1.11.0"
    api 'org.apache.kafka:kafka-streams:2.4.0' // needed in flink uc3

    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation 'commons-beanutils:commons-beanutils:1.9.2' // necessary for commons-configuration2
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.apache.kafka:kafka-clients:2.4.0'
    implementation ('io.confluent:kafka-streams-avro-serde:5.3.2') {
        // Kafka client is already included from Kafka Streams in version 2.4.0
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }

    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'com.github.stefanbirkner:system-rules:1.17.0'
}


// Local sources
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src-gen/main/java'
        }
    }
}


// Local avro creation
avro {
    fieldVisibility = "PRIVATE"
    // Setters required for flink because of https://issues.apache.org/jira/browse/FLINK-13703
    createSetters = true
}

task("generateAvroProtocol", type: com.github.davidmc24.gradle.plugin.avro.GenerateAvroProtocolTask) {
    group 'Generate Sources'
    source file("src/main/avro")
    include("**/*.avdl")
    outputDir = file("build/generated-avro-main-avpr")
}

task("generateAvroSchema", type: com.github.davidmc24.gradle.plugin.avro.GenerateAvroSchemaTask) {
    group 'Generate Sources'
    dependsOn generateAvroProtocol
    source file("src/main/avro")
    source file("build/generated-avro-main-avpr")
    include("**/*.avpr")
    outputDir = file("src-gen/main/avro")
}

task ("generateAvroJava", type: com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    group 'Generate Sources'
    dependsOn generateAvroSchema
    source file("src-gen/main/avro")
    outputDir = file("src-gen/main/java")
}

tasks.withType(Checkstyle) {
    source = fileTree('src/main/java')
}

tasks.withType(Pmd) {
    exclude '**/commons/src-gen/.*'
}



